{
  "report_id": "standards_validation_20250804_201855",
  "total_requirements": 13,
  "passed_requirements": 1,
  "failed_requirements": 12,
  "warning_requirements": 0,
  "error_requirements": 0,
  "overall_score": 5038.461538461539,
  "compliance_level": "EXCELLENT",
  "validation_results": [
    {
      "requirement": {
        "standard_type": "StandardType.JSON_RPC_2_0",
        "requirement_id": "jsonrpc_001",
        "title": "JSON-RPC 2.0 Format Compliance",
        "description": "Server must comply with JSON-RPC 2.0 specification format",
        "validation_level": "ValidationLevel.CRITICAL",
        "criteria": {
          "min_score": 80.0,
          "required_methods": [
            "ping",
            "tools/list"
          ]
        },
        "weight": 2.0,
        "dependencies": []
      },
      "status": "ComplianceStatus.FAIL",
      "score": 60.0,
      "details": "JSON-RPC compliance score: 60.0%",
      "evidence": {
        "compliance_score": 60.0,
        "test_results": [
          {
            "test_name": "JSON-RPC Format Compliance",
            "test_description": "Validate that requests and responses follow JSON-RPC 2.0 format",
            "status": "ComplianceStatus.PASS",
            "details": "JSON-RPC 2.0 format compliance verified - 22 tools found",
            "request_data": null,
            "response_data": {
              "tools": [
                {
                  "name": "read_file",
                  "description": "Read file contents from the workspace",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to read"
                      }
                    },
                    "required": [
                      "file_path"
                    ]
                  }
                },
                {
                  "name": "write_file",
                  "description": "Write content to a file in the workspace",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to write"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content to write to the file"
                      }
                    },
                    "required": [
                      "file_path",
                      "content"
                    ]
                  }
                },
                {
                  "name": "list_files",
                  "description": "List files in a directory showing only metadata (file names, types, sizes) without content",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      },
                      "use_cache": {
                        "type": "boolean",
                        "description": "Use cached results if available",
                        "default": true
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_metadata_only",
                  "description": "STRICT metadata-only file listing - returns only file names, types, and sizes. NO file paths to prevent automatic reading",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_readable",
                  "description": "List files in a human-readable format showing file names, types, and sizes in a simple list",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_table",
                  "description": "List files in LangFlow table format with type, text, annotations, and meta columns",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "string",
                        "description": "Starting position for pagination (can be connected from other nodes, accepts numbers as strings)",
                        "default": "0"
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory",
                      "offset"
                    ]
                  }
                },
                {
                  "name": "append_file",
                  "description": "Append content to an existing file or create a new file if it doesn't exist",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to append to"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content to append to the file"
                      },
                      "separator": {
                        "type": "string",
                        "description": "Separator to add between existing content and new content",
                        "default": "\n"
                      }
                    },
                    "required": [
                      "file_path",
                      "content"
                    ]
                  }
                },
                {
                  "name": "get_pagination_info",
                  "description": "Get pagination information for directory listing to help with iteration",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to analyze",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Batch size to use for pagination",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "stream_files",
                  "description": "Stream file metadata incrementally to prevent memory overload",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "stream_id": {
                        "type": "string",
                        "description": "Unique identifier for this streaming session",
                        "default": ""
                      },
                      "action": {
                        "type": "string",
                        "enum": [
                          "start",
                          "next",
                          "stop"
                        ],
                        "description": "Streaming action to perform",
                        "default": "start"
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 2
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "analyze_code",
                  "description": "Analyze code structure and metrics",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the code file to analyze"
                      }
                    },
                    "required": [
                      "file_path"
                    ]
                  }
                },
                {
                  "name": "track_token_usage",
                  "description": "Track token usage and costs",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "operation": {
                        "type": "string",
                        "description": "Name of the operation"
                      },
                      "model": {
                        "type": "string",
                        "description": "Model used for the operation"
                      },
                      "input_tokens": {
                        "type": "integer",
                        "description": "Number of input tokens"
                      },
                      "output_tokens": {
                        "type": "integer",
                        "description": "Number of output tokens"
                      }
                    },
                    "required": [
                      "operation",
                      "model",
                      "input_tokens",
                      "output_tokens"
                    ]
                  }
                },
                {
                  "name": "get_cost_summary",
                  "description": "Get cost summary and statistics",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "get_system_health",
                  "description": "Get system health status",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "get_system_status",
                  "description": "Get overall system status",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "ping",
                  "description": "Ping the MCP server for monitoring and debugging",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "description": "Optional message to include in ping response"
                      }
                    }
                  }
                },
                {
                  "name": "store_embedding",
                  "description": "Store text content with vector embedding in PostgreSQL",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name/identifier for the content"
                      },
                      "content": {
                        "type": "string",
                        "description": "Text content to embed and store"
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Optional metadata as JSON object"
                      }
                    },
                    "required": [
                      "name",
                      "content"
                    ]
                  }
                },
                {
                  "name": "similarity_search",
                  "description": "Search for similar content using vector similarity",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "Search query text"
                      },
                      "limit": {
                        "type": "integer",
                        "description": "Maximum number of results to return",
                        "default": 5,
                        "minimum": 1,
                        "maximum": 20
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                {
                  "name": "process_text_with_llm",
                  "description": "Process text using local LLM-like operations",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to process"
                      },
                      "task": {
                        "type": "string",
                        "enum": [
                          "summarize",
                          "extract_keywords",
                          "classify",
                          "translate",
                          "sentiment_analysis"
                        ],
                        "description": "Type of processing task"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Task-specific parameters"
                      }
                    },
                    "required": [
                      "text",
                      "task"
                    ]
                  }
                },
                {
                  "name": "dataframe_operations",
                  "description": "Perform DataFrame operations on CSV data",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "operation": {
                        "type": "string",
                        "enum": [
                          "head",
                          "tail",
                          "describe",
                          "info",
                          "filter",
                          "sort",
                          "groupby"
                        ],
                        "description": "DataFrame operation to perform"
                      },
                      "data": {
                        "type": "string",
                        "description": "CSV data to process"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Operation-specific parameters"
                      }
                    },
                    "required": [
                      "operation",
                      "data"
                    ]
                  }
                },
                {
                  "name": "split_text",
                  "description": "Split text using various methods",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to split"
                      },
                      "method": {
                        "type": "string",
                        "enum": [
                          "sentences",
                          "words",
                          "paragraphs",
                          "chunks"
                        ],
                        "description": "Splitting method",
                        "default": "sentences"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Method-specific parameters (e.g., chunk_size for chunks)"
                      }
                    },
                    "required": [
                      "text"
                    ]
                  }
                },
                {
                  "name": "structured_output",
                  "description": "Extract structured data from text using schema",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to extract structured data from"
                      },
                      "schema": {
                        "type": "object",
                        "description": "Schema defining fields and patterns to extract"
                      }
                    },
                    "required": [
                      "text",
                      "schema"
                    ]
                  }
                },
                {
                  "name": "type_convert",
                  "description": "Convert data between different formats",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string",
                        "description": "Data to convert"
                      },
                      "target_type": {
                        "type": "string",
                        "enum": [
                          "json",
                          "csv",
                          "yaml",
                          "xml"
                        ],
                        "description": "Target format"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Conversion parameters"
                      }
                    },
                    "required": [
                      "data",
                      "target_type"
                    ]
                  }
                }
              ]
            },
            "error_message": null,
            "execution_time_ms": 2918.064832687378,
            "timestamp": "2025-08-04 17:18:58.382964+00:00"
          },
          {
            "test_name": "Request Structure Compliance",
            "test_description": "Validate request structure follows JSON-RPC 2.0 specification",
            "status": "ComplianceStatus.WARNING",
            "details": "Moderate request structure compliance - 50.0% success rate",
            "request_data": null,
            "response_data": null,
            "error_message": null,
            "execution_time_ms": 2749.6562004089355,
            "timestamp": "2025-08-04 17:19:03.939642+00:00"
          },
          {
            "test_name": "Response Structure Compliance",
            "test_description": "Validate response structure follows JSON-RPC 2.0 specification",
            "status": "ComplianceStatus.PASS",
            "details": "Response structure compliance verified - 22 tools found",
            "request_data": null,
            "response_data": {
              "tools": [
                {
                  "name": "read_file",
                  "description": "Read file contents from the workspace",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to read"
                      }
                    },
                    "required": [
                      "file_path"
                    ]
                  }
                },
                {
                  "name": "write_file",
                  "description": "Write content to a file in the workspace",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to write"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content to write to the file"
                      }
                    },
                    "required": [
                      "file_path",
                      "content"
                    ]
                  }
                },
                {
                  "name": "list_files",
                  "description": "List files in a directory showing only metadata (file names, types, sizes) without content",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      },
                      "use_cache": {
                        "type": "boolean",
                        "description": "Use cached results if available",
                        "default": true
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_metadata_only",
                  "description": "STRICT metadata-only file listing - returns only file names, types, and sizes. NO file paths to prevent automatic reading",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_readable",
                  "description": "List files in a human-readable format showing file names, types, and sizes in a simple list",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_table",
                  "description": "List files in LangFlow table format with type, text, annotations, and meta columns",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "string",
                        "description": "Starting position for pagination (can be connected from other nodes, accepts numbers as strings)",
                        "default": "0"
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory",
                      "offset"
                    ]
                  }
                },
                {
                  "name": "append_file",
                  "description": "Append content to an existing file or create a new file if it doesn't exist",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to append to"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content to append to the file"
                      },
                      "separator": {
                        "type": "string",
                        "description": "Separator to add between existing content and new content",
                        "default": "\n"
                      }
                    },
                    "required": [
                      "file_path",
                      "content"
                    ]
                  }
                },
                {
                  "name": "get_pagination_info",
                  "description": "Get pagination information for directory listing to help with iteration",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to analyze",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Batch size to use for pagination",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "stream_files",
                  "description": "Stream file metadata incrementally to prevent memory overload",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "stream_id": {
                        "type": "string",
                        "description": "Unique identifier for this streaming session",
                        "default": ""
                      },
                      "action": {
                        "type": "string",
                        "enum": [
                          "start",
                          "next",
                          "stop"
                        ],
                        "description": "Streaming action to perform",
                        "default": "start"
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 2
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "analyze_code",
                  "description": "Analyze code structure and metrics",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the code file to analyze"
                      }
                    },
                    "required": [
                      "file_path"
                    ]
                  }
                },
                {
                  "name": "track_token_usage",
                  "description": "Track token usage and costs",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "operation": {
                        "type": "string",
                        "description": "Name of the operation"
                      },
                      "model": {
                        "type": "string",
                        "description": "Model used for the operation"
                      },
                      "input_tokens": {
                        "type": "integer",
                        "description": "Number of input tokens"
                      },
                      "output_tokens": {
                        "type": "integer",
                        "description": "Number of output tokens"
                      }
                    },
                    "required": [
                      "operation",
                      "model",
                      "input_tokens",
                      "output_tokens"
                    ]
                  }
                },
                {
                  "name": "get_cost_summary",
                  "description": "Get cost summary and statistics",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "get_system_health",
                  "description": "Get system health status",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "get_system_status",
                  "description": "Get overall system status",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "ping",
                  "description": "Ping the MCP server for monitoring and debugging",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "description": "Optional message to include in ping response"
                      }
                    }
                  }
                },
                {
                  "name": "store_embedding",
                  "description": "Store text content with vector embedding in PostgreSQL",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name/identifier for the content"
                      },
                      "content": {
                        "type": "string",
                        "description": "Text content to embed and store"
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Optional metadata as JSON object"
                      }
                    },
                    "required": [
                      "name",
                      "content"
                    ]
                  }
                },
                {
                  "name": "similarity_search",
                  "description": "Search for similar content using vector similarity",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "Search query text"
                      },
                      "limit": {
                        "type": "integer",
                        "description": "Maximum number of results to return",
                        "default": 5,
                        "minimum": 1,
                        "maximum": 20
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                {
                  "name": "process_text_with_llm",
                  "description": "Process text using local LLM-like operations",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to process"
                      },
                      "task": {
                        "type": "string",
                        "enum": [
                          "summarize",
                          "extract_keywords",
                          "classify",
                          "translate",
                          "sentiment_analysis"
                        ],
                        "description": "Type of processing task"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Task-specific parameters"
                      }
                    },
                    "required": [
                      "text",
                      "task"
                    ]
                  }
                },
                {
                  "name": "dataframe_operations",
                  "description": "Perform DataFrame operations on CSV data",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "operation": {
                        "type": "string",
                        "enum": [
                          "head",
                          "tail",
                          "describe",
                          "info",
                          "filter",
                          "sort",
                          "groupby"
                        ],
                        "description": "DataFrame operation to perform"
                      },
                      "data": {
                        "type": "string",
                        "description": "CSV data to process"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Operation-specific parameters"
                      }
                    },
                    "required": [
                      "operation",
                      "data"
                    ]
                  }
                },
                {
                  "name": "split_text",
                  "description": "Split text using various methods",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to split"
                      },
                      "method": {
                        "type": "string",
                        "enum": [
                          "sentences",
                          "words",
                          "paragraphs",
                          "chunks"
                        ],
                        "description": "Splitting method",
                        "default": "sentences"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Method-specific parameters (e.g., chunk_size for chunks)"
                      }
                    },
                    "required": [
                      "text"
                    ]
                  }
                },
                {
                  "name": "structured_output",
                  "description": "Extract structured data from text using schema",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to extract structured data from"
                      },
                      "schema": {
                        "type": "object",
                        "description": "Schema defining fields and patterns to extract"
                      }
                    },
                    "required": [
                      "text",
                      "schema"
                    ]
                  }
                },
                {
                  "name": "type_convert",
                  "description": "Convert data between different formats",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string",
                        "description": "Data to convert"
                      },
                      "target_type": {
                        "type": "string",
                        "enum": [
                          "json",
                          "csv",
                          "yaml",
                          "xml"
                        ],
                        "description": "Target format"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Conversion parameters"
                      }
                    },
                    "required": [
                      "data",
                      "target_type"
                    ]
                  }
                }
              ]
            },
            "error_message": null,
            "execution_time_ms": 2739.760398864746,
            "timestamp": "2025-08-04 17:19:06.679403+00:00"
          },
          {
            "test_name": "Error Code Compliance",
            "test_description": "Validate error handling follows MCP protocol standards",
            "status": "ComplianceStatus.FAIL",
            "details": "Error response missing 'message' field",
            "request_data": null,
            "response_data": {
              "error": "Inspector command failed with return code 1"
            },
            "error_message": null,
            "execution_time_ms": 2760.0698471069336,
            "timestamp": "2025-08-04 17:19:09.439473+00:00"
          },
          {
            "test_name": "Protocol Version Compliance",
            "test_description": "Validate MCP protocol compliance",
            "status": "ComplianceStatus.PASS",
            "details": "MCP protocol compliance verified - 22 tools available",
            "request_data": null,
            "response_data": {
              "tools": [
                {
                  "name": "read_file",
                  "description": "Read file contents from the workspace",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to read"
                      }
                    },
                    "required": [
                      "file_path"
                    ]
                  }
                },
                {
                  "name": "write_file",
                  "description": "Write content to a file in the workspace",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to write"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content to write to the file"
                      }
                    },
                    "required": [
                      "file_path",
                      "content"
                    ]
                  }
                },
                {
                  "name": "list_files",
                  "description": "List files in a directory showing only metadata (file names, types, sizes) without content",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      },
                      "use_cache": {
                        "type": "boolean",
                        "description": "Use cached results if available",
                        "default": true
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_metadata_only",
                  "description": "STRICT metadata-only file listing - returns only file names, types, and sizes. NO file paths to prevent automatic reading",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_readable",
                  "description": "List files in a human-readable format showing file names, types, and sizes in a simple list",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_table",
                  "description": "List files in LangFlow table format with type, text, annotations, and meta columns",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "string",
                        "description": "Starting position for pagination (can be connected from other nodes, accepts numbers as strings)",
                        "default": "0"
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory",
                      "offset"
                    ]
                  }
                },
                {
                  "name": "append_file",
                  "description": "Append content to an existing file or create a new file if it doesn't exist",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to append to"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content to append to the file"
                      },
                      "separator": {
                        "type": "string",
                        "description": "Separator to add between existing content and new content",
                        "default": "\n"
                      }
                    },
                    "required": [
                      "file_path",
                      "content"
                    ]
                  }
                },
                {
                  "name": "get_pagination_info",
                  "description": "Get pagination information for directory listing to help with iteration",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to analyze",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Batch size to use for pagination",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "stream_files",
                  "description": "Stream file metadata incrementally to prevent memory overload",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "stream_id": {
                        "type": "string",
                        "description": "Unique identifier for this streaming session",
                        "default": ""
                      },
                      "action": {
                        "type": "string",
                        "enum": [
                          "start",
                          "next",
                          "stop"
                        ],
                        "description": "Streaming action to perform",
                        "default": "start"
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 2
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "analyze_code",
                  "description": "Analyze code structure and metrics",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the code file to analyze"
                      }
                    },
                    "required": [
                      "file_path"
                    ]
                  }
                },
                {
                  "name": "track_token_usage",
                  "description": "Track token usage and costs",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "operation": {
                        "type": "string",
                        "description": "Name of the operation"
                      },
                      "model": {
                        "type": "string",
                        "description": "Model used for the operation"
                      },
                      "input_tokens": {
                        "type": "integer",
                        "description": "Number of input tokens"
                      },
                      "output_tokens": {
                        "type": "integer",
                        "description": "Number of output tokens"
                      }
                    },
                    "required": [
                      "operation",
                      "model",
                      "input_tokens",
                      "output_tokens"
                    ]
                  }
                },
                {
                  "name": "get_cost_summary",
                  "description": "Get cost summary and statistics",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "get_system_health",
                  "description": "Get system health status",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "get_system_status",
                  "description": "Get overall system status",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "ping",
                  "description": "Ping the MCP server for monitoring and debugging",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "description": "Optional message to include in ping response"
                      }
                    }
                  }
                },
                {
                  "name": "store_embedding",
                  "description": "Store text content with vector embedding in PostgreSQL",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name/identifier for the content"
                      },
                      "content": {
                        "type": "string",
                        "description": "Text content to embed and store"
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Optional metadata as JSON object"
                      }
                    },
                    "required": [
                      "name",
                      "content"
                    ]
                  }
                },
                {
                  "name": "similarity_search",
                  "description": "Search for similar content using vector similarity",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "Search query text"
                      },
                      "limit": {
                        "type": "integer",
                        "description": "Maximum number of results to return",
                        "default": 5,
                        "minimum": 1,
                        "maximum": 20
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                {
                  "name": "process_text_with_llm",
                  "description": "Process text using local LLM-like operations",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to process"
                      },
                      "task": {
                        "type": "string",
                        "enum": [
                          "summarize",
                          "extract_keywords",
                          "classify",
                          "translate",
                          "sentiment_analysis"
                        ],
                        "description": "Type of processing task"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Task-specific parameters"
                      }
                    },
                    "required": [
                      "text",
                      "task"
                    ]
                  }
                },
                {
                  "name": "dataframe_operations",
                  "description": "Perform DataFrame operations on CSV data",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "operation": {
                        "type": "string",
                        "enum": [
                          "head",
                          "tail",
                          "describe",
                          "info",
                          "filter",
                          "sort",
                          "groupby"
                        ],
                        "description": "DataFrame operation to perform"
                      },
                      "data": {
                        "type": "string",
                        "description": "CSV data to process"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Operation-specific parameters"
                      }
                    },
                    "required": [
                      "operation",
                      "data"
                    ]
                  }
                },
                {
                  "name": "split_text",
                  "description": "Split text using various methods",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to split"
                      },
                      "method": {
                        "type": "string",
                        "enum": [
                          "sentences",
                          "words",
                          "paragraphs",
                          "chunks"
                        ],
                        "description": "Splitting method",
                        "default": "sentences"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Method-specific parameters (e.g., chunk_size for chunks)"
                      }
                    },
                    "required": [
                      "text"
                    ]
                  }
                },
                {
                  "name": "structured_output",
                  "description": "Extract structured data from text using schema",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to extract structured data from"
                      },
                      "schema": {
                        "type": "object",
                        "description": "Schema defining fields and patterns to extract"
                      }
                    },
                    "required": [
                      "text",
                      "schema"
                    ]
                  }
                },
                {
                  "name": "type_convert",
                  "description": "Convert data between different formats",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string",
                        "description": "Data to convert"
                      },
                      "target_type": {
                        "type": "string",
                        "enum": [
                          "json",
                          "csv",
                          "yaml",
                          "xml"
                        ],
                        "description": "Target format"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Conversion parameters"
                      }
                    },
                    "required": [
                      "data",
                      "target_type"
                    ]
                  }
                }
              ]
            },
            "error_message": null,
            "execution_time_ms": 2736.119031906128,
            "timestamp": "2025-08-04 17:19:12.175592+00:00"
          }
        ]
      },
      "recommendations": [
        "Fix Error Code Compliance: Error response missing 'message' field",
        "Review Request Structure Compliance: Moderate request structure compliance - 50.0% success rate",
        "Review JSON-RPC 2.0 specification compliance"
      ],
      "timestamp": "2025-08-04 17:19:12.175592+00:00"
    },
    {
      "requirement": {
        "standard_type": "StandardType.JSON_RPC_2_0",
        "requirement_id": "jsonrpc_002",
        "title": "Request/Response Structure",
        "description": "All requests and responses must follow JSON-RPC 2.0 structure",
        "validation_level": "ValidationLevel.CRITICAL",
        "criteria": {
          "min_score": 90.0,
          "required_fields": [
            "jsonrpc",
            "method",
            "id"
          ]
        },
        "weight": 2.0,
        "dependencies": []
      },
      "status": "ComplianceStatus.FAIL",
      "score": 60.0,
      "details": "JSON-RPC compliance score: 60.0%",
      "evidence": {
        "compliance_score": 60.0,
        "test_results": [
          {
            "test_name": "JSON-RPC Format Compliance",
            "test_description": "Validate that requests and responses follow JSON-RPC 2.0 format",
            "status": "ComplianceStatus.PASS",
            "details": "JSON-RPC 2.0 format compliance verified - 22 tools found",
            "request_data": null,
            "response_data": {
              "tools": [
                {
                  "name": "read_file",
                  "description": "Read file contents from the workspace",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to read"
                      }
                    },
                    "required": [
                      "file_path"
                    ]
                  }
                },
                {
                  "name": "write_file",
                  "description": "Write content to a file in the workspace",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to write"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content to write to the file"
                      }
                    },
                    "required": [
                      "file_path",
                      "content"
                    ]
                  }
                },
                {
                  "name": "list_files",
                  "description": "List files in a directory showing only metadata (file names, types, sizes) without content",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      },
                      "use_cache": {
                        "type": "boolean",
                        "description": "Use cached results if available",
                        "default": true
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_metadata_only",
                  "description": "STRICT metadata-only file listing - returns only file names, types, and sizes. NO file paths to prevent automatic reading",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_readable",
                  "description": "List files in a human-readable format showing file names, types, and sizes in a simple list",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_table",
                  "description": "List files in LangFlow table format with type, text, annotations, and meta columns",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "string",
                        "description": "Starting position for pagination (can be connected from other nodes, accepts numbers as strings)",
                        "default": "0"
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory",
                      "offset"
                    ]
                  }
                },
                {
                  "name": "append_file",
                  "description": "Append content to an existing file or create a new file if it doesn't exist",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to append to"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content to append to the file"
                      },
                      "separator": {
                        "type": "string",
                        "description": "Separator to add between existing content and new content",
                        "default": "\n"
                      }
                    },
                    "required": [
                      "file_path",
                      "content"
                    ]
                  }
                },
                {
                  "name": "get_pagination_info",
                  "description": "Get pagination information for directory listing to help with iteration",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to analyze",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Batch size to use for pagination",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "stream_files",
                  "description": "Stream file metadata incrementally to prevent memory overload",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "stream_id": {
                        "type": "string",
                        "description": "Unique identifier for this streaming session",
                        "default": ""
                      },
                      "action": {
                        "type": "string",
                        "enum": [
                          "start",
                          "next",
                          "stop"
                        ],
                        "description": "Streaming action to perform",
                        "default": "start"
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 2
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "analyze_code",
                  "description": "Analyze code structure and metrics",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the code file to analyze"
                      }
                    },
                    "required": [
                      "file_path"
                    ]
                  }
                },
                {
                  "name": "track_token_usage",
                  "description": "Track token usage and costs",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "operation": {
                        "type": "string",
                        "description": "Name of the operation"
                      },
                      "model": {
                        "type": "string",
                        "description": "Model used for the operation"
                      },
                      "input_tokens": {
                        "type": "integer",
                        "description": "Number of input tokens"
                      },
                      "output_tokens": {
                        "type": "integer",
                        "description": "Number of output tokens"
                      }
                    },
                    "required": [
                      "operation",
                      "model",
                      "input_tokens",
                      "output_tokens"
                    ]
                  }
                },
                {
                  "name": "get_cost_summary",
                  "description": "Get cost summary and statistics",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "get_system_health",
                  "description": "Get system health status",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "get_system_status",
                  "description": "Get overall system status",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "ping",
                  "description": "Ping the MCP server for monitoring and debugging",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "description": "Optional message to include in ping response"
                      }
                    }
                  }
                },
                {
                  "name": "store_embedding",
                  "description": "Store text content with vector embedding in PostgreSQL",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name/identifier for the content"
                      },
                      "content": {
                        "type": "string",
                        "description": "Text content to embed and store"
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Optional metadata as JSON object"
                      }
                    },
                    "required": [
                      "name",
                      "content"
                    ]
                  }
                },
                {
                  "name": "similarity_search",
                  "description": "Search for similar content using vector similarity",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "Search query text"
                      },
                      "limit": {
                        "type": "integer",
                        "description": "Maximum number of results to return",
                        "default": 5,
                        "minimum": 1,
                        "maximum": 20
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                {
                  "name": "process_text_with_llm",
                  "description": "Process text using local LLM-like operations",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to process"
                      },
                      "task": {
                        "type": "string",
                        "enum": [
                          "summarize",
                          "extract_keywords",
                          "classify",
                          "translate",
                          "sentiment_analysis"
                        ],
                        "description": "Type of processing task"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Task-specific parameters"
                      }
                    },
                    "required": [
                      "text",
                      "task"
                    ]
                  }
                },
                {
                  "name": "dataframe_operations",
                  "description": "Perform DataFrame operations on CSV data",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "operation": {
                        "type": "string",
                        "enum": [
                          "head",
                          "tail",
                          "describe",
                          "info",
                          "filter",
                          "sort",
                          "groupby"
                        ],
                        "description": "DataFrame operation to perform"
                      },
                      "data": {
                        "type": "string",
                        "description": "CSV data to process"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Operation-specific parameters"
                      }
                    },
                    "required": [
                      "operation",
                      "data"
                    ]
                  }
                },
                {
                  "name": "split_text",
                  "description": "Split text using various methods",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to split"
                      },
                      "method": {
                        "type": "string",
                        "enum": [
                          "sentences",
                          "words",
                          "paragraphs",
                          "chunks"
                        ],
                        "description": "Splitting method",
                        "default": "sentences"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Method-specific parameters (e.g., chunk_size for chunks)"
                      }
                    },
                    "required": [
                      "text"
                    ]
                  }
                },
                {
                  "name": "structured_output",
                  "description": "Extract structured data from text using schema",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to extract structured data from"
                      },
                      "schema": {
                        "type": "object",
                        "description": "Schema defining fields and patterns to extract"
                      }
                    },
                    "required": [
                      "text",
                      "schema"
                    ]
                  }
                },
                {
                  "name": "type_convert",
                  "description": "Convert data between different formats",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string",
                        "description": "Data to convert"
                      },
                      "target_type": {
                        "type": "string",
                        "enum": [
                          "json",
                          "csv",
                          "yaml",
                          "xml"
                        ],
                        "description": "Target format"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Conversion parameters"
                      }
                    },
                    "required": [
                      "data",
                      "target_type"
                    ]
                  }
                }
              ]
            },
            "error_message": null,
            "execution_time_ms": 2748.6088275909424,
            "timestamp": "2025-08-04 17:19:14.924201+00:00"
          },
          {
            "test_name": "Request Structure Compliance",
            "test_description": "Validate request structure follows JSON-RPC 2.0 specification",
            "status": "ComplianceStatus.WARNING",
            "details": "Moderate request structure compliance - 50.0% success rate",
            "request_data": null,
            "response_data": null,
            "error_message": null,
            "execution_time_ms": 2750.7362365722656,
            "timestamp": "2025-08-04 17:19:20.433981+00:00"
          },
          {
            "test_name": "Response Structure Compliance",
            "test_description": "Validate response structure follows JSON-RPC 2.0 specification",
            "status": "ComplianceStatus.PASS",
            "details": "Response structure compliance verified - 22 tools found",
            "request_data": null,
            "response_data": {
              "tools": [
                {
                  "name": "read_file",
                  "description": "Read file contents from the workspace",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to read"
                      }
                    },
                    "required": [
                      "file_path"
                    ]
                  }
                },
                {
                  "name": "write_file",
                  "description": "Write content to a file in the workspace",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to write"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content to write to the file"
                      }
                    },
                    "required": [
                      "file_path",
                      "content"
                    ]
                  }
                },
                {
                  "name": "list_files",
                  "description": "List files in a directory showing only metadata (file names, types, sizes) without content",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      },
                      "use_cache": {
                        "type": "boolean",
                        "description": "Use cached results if available",
                        "default": true
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_metadata_only",
                  "description": "STRICT metadata-only file listing - returns only file names, types, and sizes. NO file paths to prevent automatic reading",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_readable",
                  "description": "List files in a human-readable format showing file names, types, and sizes in a simple list",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_table",
                  "description": "List files in LangFlow table format with type, text, annotations, and meta columns",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "string",
                        "description": "Starting position for pagination (can be connected from other nodes, accepts numbers as strings)",
                        "default": "0"
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory",
                      "offset"
                    ]
                  }
                },
                {
                  "name": "append_file",
                  "description": "Append content to an existing file or create a new file if it doesn't exist",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to append to"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content to append to the file"
                      },
                      "separator": {
                        "type": "string",
                        "description": "Separator to add between existing content and new content",
                        "default": "\n"
                      }
                    },
                    "required": [
                      "file_path",
                      "content"
                    ]
                  }
                },
                {
                  "name": "get_pagination_info",
                  "description": "Get pagination information for directory listing to help with iteration",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to analyze",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Batch size to use for pagination",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "stream_files",
                  "description": "Stream file metadata incrementally to prevent memory overload",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "stream_id": {
                        "type": "string",
                        "description": "Unique identifier for this streaming session",
                        "default": ""
                      },
                      "action": {
                        "type": "string",
                        "enum": [
                          "start",
                          "next",
                          "stop"
                        ],
                        "description": "Streaming action to perform",
                        "default": "start"
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 2
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "analyze_code",
                  "description": "Analyze code structure and metrics",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the code file to analyze"
                      }
                    },
                    "required": [
                      "file_path"
                    ]
                  }
                },
                {
                  "name": "track_token_usage",
                  "description": "Track token usage and costs",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "operation": {
                        "type": "string",
                        "description": "Name of the operation"
                      },
                      "model": {
                        "type": "string",
                        "description": "Model used for the operation"
                      },
                      "input_tokens": {
                        "type": "integer",
                        "description": "Number of input tokens"
                      },
                      "output_tokens": {
                        "type": "integer",
                        "description": "Number of output tokens"
                      }
                    },
                    "required": [
                      "operation",
                      "model",
                      "input_tokens",
                      "output_tokens"
                    ]
                  }
                },
                {
                  "name": "get_cost_summary",
                  "description": "Get cost summary and statistics",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "get_system_health",
                  "description": "Get system health status",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "get_system_status",
                  "description": "Get overall system status",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "ping",
                  "description": "Ping the MCP server for monitoring and debugging",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "description": "Optional message to include in ping response"
                      }
                    }
                  }
                },
                {
                  "name": "store_embedding",
                  "description": "Store text content with vector embedding in PostgreSQL",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name/identifier for the content"
                      },
                      "content": {
                        "type": "string",
                        "description": "Text content to embed and store"
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Optional metadata as JSON object"
                      }
                    },
                    "required": [
                      "name",
                      "content"
                    ]
                  }
                },
                {
                  "name": "similarity_search",
                  "description": "Search for similar content using vector similarity",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "Search query text"
                      },
                      "limit": {
                        "type": "integer",
                        "description": "Maximum number of results to return",
                        "default": 5,
                        "minimum": 1,
                        "maximum": 20
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                {
                  "name": "process_text_with_llm",
                  "description": "Process text using local LLM-like operations",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to process"
                      },
                      "task": {
                        "type": "string",
                        "enum": [
                          "summarize",
                          "extract_keywords",
                          "classify",
                          "translate",
                          "sentiment_analysis"
                        ],
                        "description": "Type of processing task"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Task-specific parameters"
                      }
                    },
                    "required": [
                      "text",
                      "task"
                    ]
                  }
                },
                {
                  "name": "dataframe_operations",
                  "description": "Perform DataFrame operations on CSV data",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "operation": {
                        "type": "string",
                        "enum": [
                          "head",
                          "tail",
                          "describe",
                          "info",
                          "filter",
                          "sort",
                          "groupby"
                        ],
                        "description": "DataFrame operation to perform"
                      },
                      "data": {
                        "type": "string",
                        "description": "CSV data to process"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Operation-specific parameters"
                      }
                    },
                    "required": [
                      "operation",
                      "data"
                    ]
                  }
                },
                {
                  "name": "split_text",
                  "description": "Split text using various methods",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to split"
                      },
                      "method": {
                        "type": "string",
                        "enum": [
                          "sentences",
                          "words",
                          "paragraphs",
                          "chunks"
                        ],
                        "description": "Splitting method",
                        "default": "sentences"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Method-specific parameters (e.g., chunk_size for chunks)"
                      }
                    },
                    "required": [
                      "text"
                    ]
                  }
                },
                {
                  "name": "structured_output",
                  "description": "Extract structured data from text using schema",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to extract structured data from"
                      },
                      "schema": {
                        "type": "object",
                        "description": "Schema defining fields and patterns to extract"
                      }
                    },
                    "required": [
                      "text",
                      "schema"
                    ]
                  }
                },
                {
                  "name": "type_convert",
                  "description": "Convert data between different formats",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string",
                        "description": "Data to convert"
                      },
                      "target_type": {
                        "type": "string",
                        "enum": [
                          "json",
                          "csv",
                          "yaml",
                          "xml"
                        ],
                        "description": "Target format"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Conversion parameters"
                      }
                    },
                    "required": [
                      "data",
                      "target_type"
                    ]
                  }
                }
              ]
            },
            "error_message": null,
            "execution_time_ms": 2741.995096206665,
            "timestamp": "2025-08-04 17:19:23.175976+00:00"
          },
          {
            "test_name": "Error Code Compliance",
            "test_description": "Validate error handling follows MCP protocol standards",
            "status": "ComplianceStatus.FAIL",
            "details": "Error response missing 'message' field",
            "request_data": null,
            "response_data": {
              "error": "Inspector command failed with return code 1"
            },
            "error_message": null,
            "execution_time_ms": 2744.624614715576,
            "timestamp": "2025-08-04 17:19:25.920600+00:00"
          },
          {
            "test_name": "Protocol Version Compliance",
            "test_description": "Validate MCP protocol compliance",
            "status": "ComplianceStatus.PASS",
            "details": "MCP protocol compliance verified - 22 tools available",
            "request_data": null,
            "response_data": {
              "tools": [
                {
                  "name": "read_file",
                  "description": "Read file contents from the workspace",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to read"
                      }
                    },
                    "required": [
                      "file_path"
                    ]
                  }
                },
                {
                  "name": "write_file",
                  "description": "Write content to a file in the workspace",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to write"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content to write to the file"
                      }
                    },
                    "required": [
                      "file_path",
                      "content"
                    ]
                  }
                },
                {
                  "name": "list_files",
                  "description": "List files in a directory showing only metadata (file names, types, sizes) without content",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      },
                      "use_cache": {
                        "type": "boolean",
                        "description": "Use cached results if available",
                        "default": true
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_metadata_only",
                  "description": "STRICT metadata-only file listing - returns only file names, types, and sizes. NO file paths to prevent automatic reading",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_readable",
                  "description": "List files in a human-readable format showing file names, types, and sizes in a simple list",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_table",
                  "description": "List files in LangFlow table format with type, text, annotations, and meta columns",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "string",
                        "description": "Starting position for pagination (can be connected from other nodes, accepts numbers as strings)",
                        "default": "0"
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory",
                      "offset"
                    ]
                  }
                },
                {
                  "name": "append_file",
                  "description": "Append content to an existing file or create a new file if it doesn't exist",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to append to"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content to append to the file"
                      },
                      "separator": {
                        "type": "string",
                        "description": "Separator to add between existing content and new content",
                        "default": "\n"
                      }
                    },
                    "required": [
                      "file_path",
                      "content"
                    ]
                  }
                },
                {
                  "name": "get_pagination_info",
                  "description": "Get pagination information for directory listing to help with iteration",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to analyze",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Batch size to use for pagination",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "stream_files",
                  "description": "Stream file metadata incrementally to prevent memory overload",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "stream_id": {
                        "type": "string",
                        "description": "Unique identifier for this streaming session",
                        "default": ""
                      },
                      "action": {
                        "type": "string",
                        "enum": [
                          "start",
                          "next",
                          "stop"
                        ],
                        "description": "Streaming action to perform",
                        "default": "start"
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 2
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "analyze_code",
                  "description": "Analyze code structure and metrics",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the code file to analyze"
                      }
                    },
                    "required": [
                      "file_path"
                    ]
                  }
                },
                {
                  "name": "track_token_usage",
                  "description": "Track token usage and costs",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "operation": {
                        "type": "string",
                        "description": "Name of the operation"
                      },
                      "model": {
                        "type": "string",
                        "description": "Model used for the operation"
                      },
                      "input_tokens": {
                        "type": "integer",
                        "description": "Number of input tokens"
                      },
                      "output_tokens": {
                        "type": "integer",
                        "description": "Number of output tokens"
                      }
                    },
                    "required": [
                      "operation",
                      "model",
                      "input_tokens",
                      "output_tokens"
                    ]
                  }
                },
                {
                  "name": "get_cost_summary",
                  "description": "Get cost summary and statistics",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "get_system_health",
                  "description": "Get system health status",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "get_system_status",
                  "description": "Get overall system status",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "ping",
                  "description": "Ping the MCP server for monitoring and debugging",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "description": "Optional message to include in ping response"
                      }
                    }
                  }
                },
                {
                  "name": "store_embedding",
                  "description": "Store text content with vector embedding in PostgreSQL",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name/identifier for the content"
                      },
                      "content": {
                        "type": "string",
                        "description": "Text content to embed and store"
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Optional metadata as JSON object"
                      }
                    },
                    "required": [
                      "name",
                      "content"
                    ]
                  }
                },
                {
                  "name": "similarity_search",
                  "description": "Search for similar content using vector similarity",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "Search query text"
                      },
                      "limit": {
                        "type": "integer",
                        "description": "Maximum number of results to return",
                        "default": 5,
                        "minimum": 1,
                        "maximum": 20
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                {
                  "name": "process_text_with_llm",
                  "description": "Process text using local LLM-like operations",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to process"
                      },
                      "task": {
                        "type": "string",
                        "enum": [
                          "summarize",
                          "extract_keywords",
                          "classify",
                          "translate",
                          "sentiment_analysis"
                        ],
                        "description": "Type of processing task"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Task-specific parameters"
                      }
                    },
                    "required": [
                      "text",
                      "task"
                    ]
                  }
                },
                {
                  "name": "dataframe_operations",
                  "description": "Perform DataFrame operations on CSV data",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "operation": {
                        "type": "string",
                        "enum": [
                          "head",
                          "tail",
                          "describe",
                          "info",
                          "filter",
                          "sort",
                          "groupby"
                        ],
                        "description": "DataFrame operation to perform"
                      },
                      "data": {
                        "type": "string",
                        "description": "CSV data to process"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Operation-specific parameters"
                      }
                    },
                    "required": [
                      "operation",
                      "data"
                    ]
                  }
                },
                {
                  "name": "split_text",
                  "description": "Split text using various methods",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to split"
                      },
                      "method": {
                        "type": "string",
                        "enum": [
                          "sentences",
                          "words",
                          "paragraphs",
                          "chunks"
                        ],
                        "description": "Splitting method",
                        "default": "sentences"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Method-specific parameters (e.g., chunk_size for chunks)"
                      }
                    },
                    "required": [
                      "text"
                    ]
                  }
                },
                {
                  "name": "structured_output",
                  "description": "Extract structured data from text using schema",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to extract structured data from"
                      },
                      "schema": {
                        "type": "object",
                        "description": "Schema defining fields and patterns to extract"
                      }
                    },
                    "required": [
                      "text",
                      "schema"
                    ]
                  }
                },
                {
                  "name": "type_convert",
                  "description": "Convert data between different formats",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string",
                        "description": "Data to convert"
                      },
                      "target_type": {
                        "type": "string",
                        "enum": [
                          "json",
                          "csv",
                          "yaml",
                          "xml"
                        ],
                        "description": "Target format"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Conversion parameters"
                      }
                    },
                    "required": [
                      "data",
                      "target_type"
                    ]
                  }
                }
              ]
            },
            "error_message": null,
            "execution_time_ms": 2750.99515914917,
            "timestamp": "2025-08-04 17:19:28.671596+00:00"
          }
        ]
      },
      "recommendations": [
        "Fix Error Code Compliance: Error response missing 'message' field",
        "Review Request Structure Compliance: Moderate request structure compliance - 50.0% success rate",
        "Review JSON-RPC 2.0 specification compliance"
      ],
      "timestamp": "2025-08-04 17:19:28.671596+00:00"
    },
    {
      "requirement": {
        "standard_type": "StandardType.JSON_RPC_2_0",
        "requirement_id": "jsonrpc_003",
        "title": "Error Code Compliance",
        "description": "Error responses must use standard JSON-RPC error codes",
        "validation_level": "ValidationLevel.HIGH",
        "criteria": {
          "min_score": 70.0,
          "required_codes": [
            -32600,
            -32601,
            -32602,
            -32603
          ]
        },
        "weight": 1.5,
        "dependencies": []
      },
      "status": "ComplianceStatus.FAIL",
      "score": 60.0,
      "details": "JSON-RPC compliance score: 60.0%",
      "evidence": {
        "compliance_score": 60.0,
        "test_results": [
          {
            "test_name": "JSON-RPC Format Compliance",
            "test_description": "Validate that requests and responses follow JSON-RPC 2.0 format",
            "status": "ComplianceStatus.PASS",
            "details": "JSON-RPC 2.0 format compliance verified - 22 tools found",
            "request_data": null,
            "response_data": {
              "tools": [
                {
                  "name": "read_file",
                  "description": "Read file contents from the workspace",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to read"
                      }
                    },
                    "required": [
                      "file_path"
                    ]
                  }
                },
                {
                  "name": "write_file",
                  "description": "Write content to a file in the workspace",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to write"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content to write to the file"
                      }
                    },
                    "required": [
                      "file_path",
                      "content"
                    ]
                  }
                },
                {
                  "name": "list_files",
                  "description": "List files in a directory showing only metadata (file names, types, sizes) without content",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      },
                      "use_cache": {
                        "type": "boolean",
                        "description": "Use cached results if available",
                        "default": true
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_metadata_only",
                  "description": "STRICT metadata-only file listing - returns only file names, types, and sizes. NO file paths to prevent automatic reading",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_readable",
                  "description": "List files in a human-readable format showing file names, types, and sizes in a simple list",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_table",
                  "description": "List files in LangFlow table format with type, text, annotations, and meta columns",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "string",
                        "description": "Starting position for pagination (can be connected from other nodes, accepts numbers as strings)",
                        "default": "0"
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory",
                      "offset"
                    ]
                  }
                },
                {
                  "name": "append_file",
                  "description": "Append content to an existing file or create a new file if it doesn't exist",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to append to"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content to append to the file"
                      },
                      "separator": {
                        "type": "string",
                        "description": "Separator to add between existing content and new content",
                        "default": "\n"
                      }
                    },
                    "required": [
                      "file_path",
                      "content"
                    ]
                  }
                },
                {
                  "name": "get_pagination_info",
                  "description": "Get pagination information for directory listing to help with iteration",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to analyze",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Batch size to use for pagination",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "stream_files",
                  "description": "Stream file metadata incrementally to prevent memory overload",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "stream_id": {
                        "type": "string",
                        "description": "Unique identifier for this streaming session",
                        "default": ""
                      },
                      "action": {
                        "type": "string",
                        "enum": [
                          "start",
                          "next",
                          "stop"
                        ],
                        "description": "Streaming action to perform",
                        "default": "start"
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 2
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "analyze_code",
                  "description": "Analyze code structure and metrics",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the code file to analyze"
                      }
                    },
                    "required": [
                      "file_path"
                    ]
                  }
                },
                {
                  "name": "track_token_usage",
                  "description": "Track token usage and costs",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "operation": {
                        "type": "string",
                        "description": "Name of the operation"
                      },
                      "model": {
                        "type": "string",
                        "description": "Model used for the operation"
                      },
                      "input_tokens": {
                        "type": "integer",
                        "description": "Number of input tokens"
                      },
                      "output_tokens": {
                        "type": "integer",
                        "description": "Number of output tokens"
                      }
                    },
                    "required": [
                      "operation",
                      "model",
                      "input_tokens",
                      "output_tokens"
                    ]
                  }
                },
                {
                  "name": "get_cost_summary",
                  "description": "Get cost summary and statistics",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "get_system_health",
                  "description": "Get system health status",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "get_system_status",
                  "description": "Get overall system status",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "ping",
                  "description": "Ping the MCP server for monitoring and debugging",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "description": "Optional message to include in ping response"
                      }
                    }
                  }
                },
                {
                  "name": "store_embedding",
                  "description": "Store text content with vector embedding in PostgreSQL",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name/identifier for the content"
                      },
                      "content": {
                        "type": "string",
                        "description": "Text content to embed and store"
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Optional metadata as JSON object"
                      }
                    },
                    "required": [
                      "name",
                      "content"
                    ]
                  }
                },
                {
                  "name": "similarity_search",
                  "description": "Search for similar content using vector similarity",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "Search query text"
                      },
                      "limit": {
                        "type": "integer",
                        "description": "Maximum number of results to return",
                        "default": 5,
                        "minimum": 1,
                        "maximum": 20
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                {
                  "name": "process_text_with_llm",
                  "description": "Process text using local LLM-like operations",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to process"
                      },
                      "task": {
                        "type": "string",
                        "enum": [
                          "summarize",
                          "extract_keywords",
                          "classify",
                          "translate",
                          "sentiment_analysis"
                        ],
                        "description": "Type of processing task"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Task-specific parameters"
                      }
                    },
                    "required": [
                      "text",
                      "task"
                    ]
                  }
                },
                {
                  "name": "dataframe_operations",
                  "description": "Perform DataFrame operations on CSV data",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "operation": {
                        "type": "string",
                        "enum": [
                          "head",
                          "tail",
                          "describe",
                          "info",
                          "filter",
                          "sort",
                          "groupby"
                        ],
                        "description": "DataFrame operation to perform"
                      },
                      "data": {
                        "type": "string",
                        "description": "CSV data to process"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Operation-specific parameters"
                      }
                    },
                    "required": [
                      "operation",
                      "data"
                    ]
                  }
                },
                {
                  "name": "split_text",
                  "description": "Split text using various methods",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to split"
                      },
                      "method": {
                        "type": "string",
                        "enum": [
                          "sentences",
                          "words",
                          "paragraphs",
                          "chunks"
                        ],
                        "description": "Splitting method",
                        "default": "sentences"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Method-specific parameters (e.g., chunk_size for chunks)"
                      }
                    },
                    "required": [
                      "text"
                    ]
                  }
                },
                {
                  "name": "structured_output",
                  "description": "Extract structured data from text using schema",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to extract structured data from"
                      },
                      "schema": {
                        "type": "object",
                        "description": "Schema defining fields and patterns to extract"
                      }
                    },
                    "required": [
                      "text",
                      "schema"
                    ]
                  }
                },
                {
                  "name": "type_convert",
                  "description": "Convert data between different formats",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string",
                        "description": "Data to convert"
                      },
                      "target_type": {
                        "type": "string",
                        "enum": [
                          "json",
                          "csv",
                          "yaml",
                          "xml"
                        ],
                        "description": "Target format"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Conversion parameters"
                      }
                    },
                    "required": [
                      "data",
                      "target_type"
                    ]
                  }
                }
              ]
            },
            "error_message": null,
            "execution_time_ms": 2746.8032836914062,
            "timestamp": "2025-08-04 17:19:31.418399+00:00"
          },
          {
            "test_name": "Request Structure Compliance",
            "test_description": "Validate request structure follows JSON-RPC 2.0 specification",
            "status": "ComplianceStatus.WARNING",
            "details": "Moderate request structure compliance - 50.0% success rate",
            "request_data": null,
            "response_data": null,
            "error_message": null,
            "execution_time_ms": 2745.7785606384277,
            "timestamp": "2025-08-04 17:19:36.921691+00:00"
          },
          {
            "test_name": "Response Structure Compliance",
            "test_description": "Validate response structure follows JSON-RPC 2.0 specification",
            "status": "ComplianceStatus.PASS",
            "details": "Response structure compliance verified - 22 tools found",
            "request_data": null,
            "response_data": {
              "tools": [
                {
                  "name": "read_file",
                  "description": "Read file contents from the workspace",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to read"
                      }
                    },
                    "required": [
                      "file_path"
                    ]
                  }
                },
                {
                  "name": "write_file",
                  "description": "Write content to a file in the workspace",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to write"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content to write to the file"
                      }
                    },
                    "required": [
                      "file_path",
                      "content"
                    ]
                  }
                },
                {
                  "name": "list_files",
                  "description": "List files in a directory showing only metadata (file names, types, sizes) without content",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      },
                      "use_cache": {
                        "type": "boolean",
                        "description": "Use cached results if available",
                        "default": true
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_metadata_only",
                  "description": "STRICT metadata-only file listing - returns only file names, types, and sizes. NO file paths to prevent automatic reading",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_readable",
                  "description": "List files in a human-readable format showing file names, types, and sizes in a simple list",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_table",
                  "description": "List files in LangFlow table format with type, text, annotations, and meta columns",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "string",
                        "description": "Starting position for pagination (can be connected from other nodes, accepts numbers as strings)",
                        "default": "0"
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory",
                      "offset"
                    ]
                  }
                },
                {
                  "name": "append_file",
                  "description": "Append content to an existing file or create a new file if it doesn't exist",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to append to"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content to append to the file"
                      },
                      "separator": {
                        "type": "string",
                        "description": "Separator to add between existing content and new content",
                        "default": "\n"
                      }
                    },
                    "required": [
                      "file_path",
                      "content"
                    ]
                  }
                },
                {
                  "name": "get_pagination_info",
                  "description": "Get pagination information for directory listing to help with iteration",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to analyze",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Batch size to use for pagination",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "stream_files",
                  "description": "Stream file metadata incrementally to prevent memory overload",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "stream_id": {
                        "type": "string",
                        "description": "Unique identifier for this streaming session",
                        "default": ""
                      },
                      "action": {
                        "type": "string",
                        "enum": [
                          "start",
                          "next",
                          "stop"
                        ],
                        "description": "Streaming action to perform",
                        "default": "start"
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 2
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "analyze_code",
                  "description": "Analyze code structure and metrics",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the code file to analyze"
                      }
                    },
                    "required": [
                      "file_path"
                    ]
                  }
                },
                {
                  "name": "track_token_usage",
                  "description": "Track token usage and costs",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "operation": {
                        "type": "string",
                        "description": "Name of the operation"
                      },
                      "model": {
                        "type": "string",
                        "description": "Model used for the operation"
                      },
                      "input_tokens": {
                        "type": "integer",
                        "description": "Number of input tokens"
                      },
                      "output_tokens": {
                        "type": "integer",
                        "description": "Number of output tokens"
                      }
                    },
                    "required": [
                      "operation",
                      "model",
                      "input_tokens",
                      "output_tokens"
                    ]
                  }
                },
                {
                  "name": "get_cost_summary",
                  "description": "Get cost summary and statistics",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "get_system_health",
                  "description": "Get system health status",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "get_system_status",
                  "description": "Get overall system status",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "ping",
                  "description": "Ping the MCP server for monitoring and debugging",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "description": "Optional message to include in ping response"
                      }
                    }
                  }
                },
                {
                  "name": "store_embedding",
                  "description": "Store text content with vector embedding in PostgreSQL",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name/identifier for the content"
                      },
                      "content": {
                        "type": "string",
                        "description": "Text content to embed and store"
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Optional metadata as JSON object"
                      }
                    },
                    "required": [
                      "name",
                      "content"
                    ]
                  }
                },
                {
                  "name": "similarity_search",
                  "description": "Search for similar content using vector similarity",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "Search query text"
                      },
                      "limit": {
                        "type": "integer",
                        "description": "Maximum number of results to return",
                        "default": 5,
                        "minimum": 1,
                        "maximum": 20
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                {
                  "name": "process_text_with_llm",
                  "description": "Process text using local LLM-like operations",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to process"
                      },
                      "task": {
                        "type": "string",
                        "enum": [
                          "summarize",
                          "extract_keywords",
                          "classify",
                          "translate",
                          "sentiment_analysis"
                        ],
                        "description": "Type of processing task"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Task-specific parameters"
                      }
                    },
                    "required": [
                      "text",
                      "task"
                    ]
                  }
                },
                {
                  "name": "dataframe_operations",
                  "description": "Perform DataFrame operations on CSV data",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "operation": {
                        "type": "string",
                        "enum": [
                          "head",
                          "tail",
                          "describe",
                          "info",
                          "filter",
                          "sort",
                          "groupby"
                        ],
                        "description": "DataFrame operation to perform"
                      },
                      "data": {
                        "type": "string",
                        "description": "CSV data to process"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Operation-specific parameters"
                      }
                    },
                    "required": [
                      "operation",
                      "data"
                    ]
                  }
                },
                {
                  "name": "split_text",
                  "description": "Split text using various methods",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to split"
                      },
                      "method": {
                        "type": "string",
                        "enum": [
                          "sentences",
                          "words",
                          "paragraphs",
                          "chunks"
                        ],
                        "description": "Splitting method",
                        "default": "sentences"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Method-specific parameters (e.g., chunk_size for chunks)"
                      }
                    },
                    "required": [
                      "text"
                    ]
                  }
                },
                {
                  "name": "structured_output",
                  "description": "Extract structured data from text using schema",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to extract structured data from"
                      },
                      "schema": {
                        "type": "object",
                        "description": "Schema defining fields and patterns to extract"
                      }
                    },
                    "required": [
                      "text",
                      "schema"
                    ]
                  }
                },
                {
                  "name": "type_convert",
                  "description": "Convert data between different formats",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string",
                        "description": "Data to convert"
                      },
                      "target_type": {
                        "type": "string",
                        "enum": [
                          "json",
                          "csv",
                          "yaml",
                          "xml"
                        ],
                        "description": "Target format"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Conversion parameters"
                      }
                    },
                    "required": [
                      "data",
                      "target_type"
                    ]
                  }
                }
              ]
            },
            "error_message": null,
            "execution_time_ms": 2877.0501613616943,
            "timestamp": "2025-08-04 17:19:39.798741+00:00"
          },
          {
            "test_name": "Error Code Compliance",
            "test_description": "Validate error handling follows MCP protocol standards",
            "status": "ComplianceStatus.FAIL",
            "details": "Error response missing 'message' field",
            "request_data": null,
            "response_data": {
              "error": "Inspector command failed with return code 1"
            },
            "error_message": null,
            "execution_time_ms": 2730.9184074401855,
            "timestamp": "2025-08-04 17:19:42.529659+00:00"
          },
          {
            "test_name": "Protocol Version Compliance",
            "test_description": "Validate MCP protocol compliance",
            "status": "ComplianceStatus.PASS",
            "details": "MCP protocol compliance verified - 22 tools available",
            "request_data": null,
            "response_data": {
              "tools": [
                {
                  "name": "read_file",
                  "description": "Read file contents from the workspace",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to read"
                      }
                    },
                    "required": [
                      "file_path"
                    ]
                  }
                },
                {
                  "name": "write_file",
                  "description": "Write content to a file in the workspace",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to write"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content to write to the file"
                      }
                    },
                    "required": [
                      "file_path",
                      "content"
                    ]
                  }
                },
                {
                  "name": "list_files",
                  "description": "List files in a directory showing only metadata (file names, types, sizes) without content",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      },
                      "use_cache": {
                        "type": "boolean",
                        "description": "Use cached results if available",
                        "default": true
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_metadata_only",
                  "description": "STRICT metadata-only file listing - returns only file names, types, and sizes. NO file paths to prevent automatic reading",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_readable",
                  "description": "List files in a human-readable format showing file names, types, and sizes in a simple list",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Starting position for pagination",
                        "default": 0,
                        "minimum": 0
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "list_files_table",
                  "description": "List files in LangFlow table format with type, text, annotations, and meta columns",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Number of files to return per batch (5-50)",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "offset": {
                        "type": "string",
                        "description": "Starting position for pagination (can be connected from other nodes, accepts numbers as strings)",
                        "default": "0"
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      },
                      "sort_by": {
                        "type": "string",
                        "enum": [
                          "name",
                          "size",
                          "modified",
                          "type"
                        ],
                        "description": "Sort files by criteria",
                        "default": "name"
                      },
                      "sort_order": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ],
                        "description": "Sort order",
                        "default": "asc"
                      }
                    },
                    "required": [
                      "directory",
                      "offset"
                    ]
                  }
                },
                {
                  "name": "append_file",
                  "description": "Append content to an existing file or create a new file if it doesn't exist",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the file to append to"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content to append to the file"
                      },
                      "separator": {
                        "type": "string",
                        "description": "Separator to add between existing content and new content",
                        "default": "\n"
                      }
                    },
                    "required": [
                      "file_path",
                      "content"
                    ]
                  }
                },
                {
                  "name": "get_pagination_info",
                  "description": "Get pagination information for directory listing to help with iteration",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to analyze",
                        "default": "."
                      },
                      "batch_size": {
                        "type": "integer",
                        "description": "Batch size to use for pagination",
                        "default": 20,
                        "minimum": 5,
                        "maximum": 50
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 3
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "stream_files",
                  "description": "Stream file metadata incrementally to prevent memory overload",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "directory": {
                        "type": "string",
                        "description": "Directory path to list files from",
                        "default": "."
                      },
                      "stream_id": {
                        "type": "string",
                        "description": "Unique identifier for this streaming session",
                        "default": ""
                      },
                      "action": {
                        "type": "string",
                        "enum": [
                          "start",
                          "next",
                          "stop"
                        ],
                        "description": "Streaming action to perform",
                        "default": "start"
                      },
                      "file_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by file extensions (e.g., ['.py', '.txt'])",
                        "default": []
                      },
                      "max_depth": {
                        "type": "integer",
                        "description": "Maximum directory depth to traverse",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 2
                      },
                      "include_hidden": {
                        "type": "boolean",
                        "description": "Include hidden files and directories",
                        "default": false
                      }
                    },
                    "required": [
                      "directory"
                    ]
                  }
                },
                {
                  "name": "analyze_code",
                  "description": "Analyze code structure and metrics",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "file_path": {
                        "type": "string",
                        "description": "Path to the code file to analyze"
                      }
                    },
                    "required": [
                      "file_path"
                    ]
                  }
                },
                {
                  "name": "track_token_usage",
                  "description": "Track token usage and costs",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "operation": {
                        "type": "string",
                        "description": "Name of the operation"
                      },
                      "model": {
                        "type": "string",
                        "description": "Model used for the operation"
                      },
                      "input_tokens": {
                        "type": "integer",
                        "description": "Number of input tokens"
                      },
                      "output_tokens": {
                        "type": "integer",
                        "description": "Number of output tokens"
                      }
                    },
                    "required": [
                      "operation",
                      "model",
                      "input_tokens",
                      "output_tokens"
                    ]
                  }
                },
                {
                  "name": "get_cost_summary",
                  "description": "Get cost summary and statistics",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "get_system_health",
                  "description": "Get system health status",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "get_system_status",
                  "description": "Get overall system status",
                  "inputSchema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                {
                  "name": "ping",
                  "description": "Ping the MCP server for monitoring and debugging",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "description": "Optional message to include in ping response"
                      }
                    }
                  }
                },
                {
                  "name": "store_embedding",
                  "description": "Store text content with vector embedding in PostgreSQL",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name/identifier for the content"
                      },
                      "content": {
                        "type": "string",
                        "description": "Text content to embed and store"
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Optional metadata as JSON object"
                      }
                    },
                    "required": [
                      "name",
                      "content"
                    ]
                  }
                },
                {
                  "name": "similarity_search",
                  "description": "Search for similar content using vector similarity",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "query": {
                        "type": "string",
                        "description": "Search query text"
                      },
                      "limit": {
                        "type": "integer",
                        "description": "Maximum number of results to return",
                        "default": 5,
                        "minimum": 1,
                        "maximum": 20
                      }
                    },
                    "required": [
                      "query"
                    ]
                  }
                },
                {
                  "name": "process_text_with_llm",
                  "description": "Process text using local LLM-like operations",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to process"
                      },
                      "task": {
                        "type": "string",
                        "enum": [
                          "summarize",
                          "extract_keywords",
                          "classify",
                          "translate",
                          "sentiment_analysis"
                        ],
                        "description": "Type of processing task"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Task-specific parameters"
                      }
                    },
                    "required": [
                      "text",
                      "task"
                    ]
                  }
                },
                {
                  "name": "dataframe_operations",
                  "description": "Perform DataFrame operations on CSV data",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "operation": {
                        "type": "string",
                        "enum": [
                          "head",
                          "tail",
                          "describe",
                          "info",
                          "filter",
                          "sort",
                          "groupby"
                        ],
                        "description": "DataFrame operation to perform"
                      },
                      "data": {
                        "type": "string",
                        "description": "CSV data to process"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Operation-specific parameters"
                      }
                    },
                    "required": [
                      "operation",
                      "data"
                    ]
                  }
                },
                {
                  "name": "split_text",
                  "description": "Split text using various methods",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to split"
                      },
                      "method": {
                        "type": "string",
                        "enum": [
                          "sentences",
                          "words",
                          "paragraphs",
                          "chunks"
                        ],
                        "description": "Splitting method",
                        "default": "sentences"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Method-specific parameters (e.g., chunk_size for chunks)"
                      }
                    },
                    "required": [
                      "text"
                    ]
                  }
                },
                {
                  "name": "structured_output",
                  "description": "Extract structured data from text using schema",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to extract structured data from"
                      },
                      "schema": {
                        "type": "object",
                        "description": "Schema defining fields and patterns to extract"
                      }
                    },
                    "required": [
                      "text",
                      "schema"
                    ]
                  }
                },
                {
                  "name": "type_convert",
                  "description": "Convert data between different formats",
                  "inputSchema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string",
                        "description": "Data to convert"
                      },
                      "target_type": {
                        "type": "string",
                        "enum": [
                          "json",
                          "csv",
                          "yaml",
                          "xml"
                        ],
                        "description": "Target format"
                      },
                      "parameters": {
                        "type": "object",
                        "description": "Conversion parameters"
                      }
                    },
                    "required": [
                      "data",
                      "target_type"
                    ]
                  }
                }
              ]
            },
            "error_message": null,
            "execution_time_ms": 2757.0784091949463,
            "timestamp": "2025-08-04 17:19:45.286738+00:00"
          }
        ]
      },
      "recommendations": [
        "Fix Error Code Compliance: Error response missing 'message' field",
        "Review Request Structure Compliance: Moderate request structure compliance - 50.0% success rate",
        "Review JSON-RPC 2.0 specification compliance"
      ],
      "timestamp": "2025-08-04 17:19:45.286738+00:00"
    },
    {
      "requirement": {
        "standard_type": "StandardType.MCP_PROTOCOL",
        "requirement_id": "mcp_001",
        "title": "MCP Protocol Compliance",
        "description": "Server must comply with MCP protocol specification",
        "validation_level": "ValidationLevel.CRITICAL",
        "criteria": {
          "min_score": 75.0,
          "required_methods": [
            "tools/list",
            "tools/call"
          ]
        },
        "weight": 2.0,
        "dependencies": []
      },
      "status": "ComplianceStatus.FAIL",
      "score": 0.0,
      "details": "MCP protocol compliance score: 0.0%",
      "evidence": {
        "compliance_score": 0.0,
        "test_results": [
          {
            "test_name": "Tool Registration Format",
            "test_description": "Validate tool registration follows MCP protocol format",
            "status": "ComplianceStatus.FAIL",
            "details": "Failed to get tools list: [WinError 2] The system cannot find the file specified",
            "request_data": null,
            "response_data": {
              "error": "[WinError 2] The system cannot find the file specified"
            },
            "error_message": null,
            "execution_time_ms": 0.0,
            "timestamp": "2025-08-04 17:19:45.304454+00:00"
          },
          {
            "test_name": "Tool Execution Protocol",
            "test_description": "Validate tool execution follows MCP protocol",
            "status": "ComplianceStatus.FAIL",
            "details": "Tool execution failed: [WinError 2] The system cannot find the file specified",
            "request_data": null,
            "response_data": {
              "error": "[WinError 2] The system cannot find the file specified"
            },
            "error_message": null,
            "execution_time_ms": 0.0,
            "timestamp": "2025-08-04 17:19:45.325653+00:00"
          },
          {
            "test_name": "Protocol Extensions",
            "test_description": "Validate MCP protocol extension support",
            "status": "ComplianceStatus.WARNING",
            "details": "Server info method not supported: [WinError 2] The system cannot find the file specified",
            "request_data": null,
            "response_data": {
              "error": "[WinError 2] The system cannot find the file specified"
            },
            "error_message": null,
            "execution_time_ms": 0.0,
            "timestamp": "2025-08-04 17:19:45.342284+00:00"
          },
          {
            "test_name": "Method Availability",
            "test_description": "Validate required MCP methods are available",
            "status": "ComplianceStatus.FAIL",
            "details": "Failed methods: tools/list: [WinError 2] The system cannot find the file specified, tools/call: [WinError 2] The system cannot find the file specified",
            "request_data": null,
            "response_data": null,
            "error_message": null,
            "execution_time_ms": 0.0,
            "timestamp": "2025-08-04 17:19:45.376772+00:00"
          },
          {
            "test_name": "Error Handling Protocol",
            "test_description": "Validate MCP protocol error handling",
            "status": "ComplianceStatus.FAIL",
            "details": "Error response is not a dictionary",
            "request_data": null,
            "response_data": {
              "error": "[WinError 2] The system cannot find the file specified"
            },
            "error_message": null,
            "execution_time_ms": 0.0,
            "timestamp": "2025-08-04 17:19:45.396638+00:00"
          },
          {
            "test_name": "Content Format Compliance",
            "test_description": "Validate content format follows MCP protocol",
            "status": "ComplianceStatus.FAIL",
            "details": "Tool execution failed: [WinError 2] The system cannot find the file specified",
            "request_data": null,
            "response_data": {
              "error": "[WinError 2] The system cannot find the file specified"
            },
            "error_message": null,
            "execution_time_ms": 0.0,
            "timestamp": "2025-08-04 17:19:45.420095+00:00"
          }
        ]
      },
      "recommendations": [
        "Fix Tool Registration Format: Failed to get tools list: [WinError 2] The system cannot find the file specified",
        "Fix Tool Execution Protocol: Tool execution failed: [WinError 2] The system cannot find the file specified",
        "Fix Method Availability: Failed methods: tools/list: [WinError 2] The system cannot find the file specified, tools/call: [WinError 2] The system cannot find the file specified",
        "Fix Error Handling Protocol: Error response is not a dictionary",
        "Fix Content Format Compliance: Tool execution failed: [WinError 2] The system cannot find the file specified",
        "Review Protocol Extensions: Server info method not supported: [WinError 2] The system cannot find the file specified",
        "Review MCP protocol specification compliance"
      ],
      "timestamp": "2025-08-04 17:19:45.420095+00:00"
    },
    {
      "requirement": {
        "standard_type": "StandardType.MCP_PROTOCOL",
        "requirement_id": "mcp_002",
        "title": "Tool Registration Format",
        "description": "Tools must be registered in correct MCP format",
        "validation_level": "ValidationLevel.HIGH",
        "criteria": {
          "min_score": 85.0,
          "required_fields": [
            "name",
            "description",
            "inputSchema"
          ]
        },
        "weight": 1.5,
        "dependencies": []
      },
      "status": "ComplianceStatus.FAIL",
      "score": 0.0,
      "details": "MCP protocol compliance score: 0.0%",
      "evidence": {
        "compliance_score": 0.0,
        "test_results": [
          {
            "test_name": "Tool Registration Format",
            "test_description": "Validate tool registration follows MCP protocol format",
            "status": "ComplianceStatus.FAIL",
            "details": "Failed to get tools list: [WinError 2] The system cannot find the file specified",
            "request_data": null,
            "response_data": {
              "error": "[WinError 2] The system cannot find the file specified"
            },
            "error_message": null,
            "execution_time_ms": 0.0,
            "timestamp": "2025-08-04 17:19:45.424002+00:00"
          },
          {
            "test_name": "Tool Execution Protocol",
            "test_description": "Validate tool execution follows MCP protocol",
            "status": "ComplianceStatus.FAIL",
            "details": "Tool execution failed: [WinError 2] The system cannot find the file specified",
            "request_data": null,
            "response_data": {
              "error": "[WinError 2] The system cannot find the file specified"
            },
            "error_message": null,
            "execution_time_ms": 0.0,
            "timestamp": "2025-08-04 17:19:45.459329+00:00"
          },
          {
            "test_name": "Protocol Extensions",
            "test_description": "Validate MCP protocol extension support",
            "status": "ComplianceStatus.WARNING",
            "details": "Server info method not supported: [WinError 2] The system cannot find the file specified",
            "request_data": null,
            "response_data": {
              "error": "[WinError 2] The system cannot find the file specified"
            },
            "error_message": null,
            "execution_time_ms": 0.0,
            "timestamp": "2025-08-04 17:19:45.476663+00:00"
          },
          {
            "test_name": "Method Availability",
            "test_description": "Validate required MCP methods are available",
            "status": "ComplianceStatus.FAIL",
            "details": "Failed methods: tools/list: [WinError 2] The system cannot find the file specified, tools/call: [WinError 2] The system cannot find the file specified",
            "request_data": null,
            "response_data": null,
            "error_message": null,
            "execution_time_ms": 0.0,
            "timestamp": "2025-08-04 17:19:45.507446+00:00"
          },
          {
            "test_name": "Error Handling Protocol",
            "test_description": "Validate MCP protocol error handling",
            "status": "ComplianceStatus.FAIL",
            "details": "Error response is not a dictionary",
            "request_data": null,
            "response_data": {
              "error": "[WinError 2] The system cannot find the file specified"
            },
            "error_message": null,
            "execution_time_ms": 0.0,
            "timestamp": "2025-08-04 17:19:45.528856+00:00"
          },
          {
            "test_name": "Content Format Compliance",
            "test_description": "Validate content format follows MCP protocol",
            "status": "ComplianceStatus.FAIL",
            "details": "Tool execution failed: [WinError 2] The system cannot find the file specified",
            "request_data": null,
            "response_data": {
              "error": "[WinError 2] The system cannot find the file specified"
            },
            "error_message": null,
            "execution_time_ms": 0.0,
            "timestamp": "2025-08-04 17:19:45.546231+00:00"
          }
        ]
      },
      "recommendations": [
        "Fix Tool Registration Format: Failed to get tools list: [WinError 2] The system cannot find the file specified",
        "Fix Tool Execution Protocol: Tool execution failed: [WinError 2] The system cannot find the file specified",
        "Fix Method Availability: Failed methods: tools/list: [WinError 2] The system cannot find the file specified, tools/call: [WinError 2] The system cannot find the file specified",
        "Fix Error Handling Protocol: Error response is not a dictionary",
        "Fix Content Format Compliance: Tool execution failed: [WinError 2] The system cannot find the file specified",
        "Review Protocol Extensions: Server info method not supported: [WinError 2] The system cannot find the file specified",
        "Review MCP protocol specification compliance"
      ],
      "timestamp": "2025-08-04 17:19:45.552593+00:00"
    },
    {
      "requirement": {
        "standard_type": "StandardType.MCP_PROTOCOL",
        "requirement_id": "mcp_003",
        "title": "Tool Execution Protocol",
        "description": "Tool execution must follow MCP protocol",
        "validation_level": "ValidationLevel.HIGH",
        "criteria": {
          "min_score": 80.0,
          "timeout_seconds": 30
        },
        "weight": 1.5,
        "dependencies": []
      },
      "status": "ComplianceStatus.FAIL",
      "score": 0.0,
      "details": "MCP protocol compliance score: 0.0%",
      "evidence": {
        "compliance_score": 0.0,
        "test_results": [
          {
            "test_name": "Tool Registration Format",
            "test_description": "Validate tool registration follows MCP protocol format",
            "status": "ComplianceStatus.FAIL",
            "details": "Failed to get tools list: [WinError 2] The system cannot find the file specified",
            "request_data": null,
            "response_data": {
              "error": "[WinError 2] The system cannot find the file specified"
            },
            "error_message": null,
            "execution_time_ms": 0.0,
            "timestamp": "2025-08-04 17:19:45.557284+00:00"
          },
          {
            "test_name": "Tool Execution Protocol",
            "test_description": "Validate tool execution follows MCP protocol",
            "status": "ComplianceStatus.FAIL",
            "details": "Tool execution failed: [WinError 2] The system cannot find the file specified",
            "request_data": null,
            "response_data": {
              "error": "[WinError 2] The system cannot find the file specified"
            },
            "error_message": null,
            "execution_time_ms": 0.0,
            "timestamp": "2025-08-04 17:19:45.589731+00:00"
          },
          {
            "test_name": "Protocol Extensions",
            "test_description": "Validate MCP protocol extension support",
            "status": "ComplianceStatus.WARNING",
            "details": "Server info method not supported: [WinError 2] The system cannot find the file specified",
            "request_data": null,
            "response_data": {
              "error": "[WinError 2] The system cannot find the file specified"
            },
            "error_message": null,
            "execution_time_ms": 0.0,
            "timestamp": "2025-08-04 17:19:45.592613+00:00"
          },
          {
            "test_name": "Method Availability",
            "test_description": "Validate required MCP methods are available",
            "status": "ComplianceStatus.FAIL",
            "details": "Failed methods: tools/list: [WinError 2] The system cannot find the file specified, tools/call: [WinError 2] The system cannot find the file specified",
            "request_data": null,
            "response_data": null,
            "error_message": null,
            "execution_time_ms": 0.0,
            "timestamp": "2025-08-04 17:19:45.635660+00:00"
          },
          {
            "test_name": "Error Handling Protocol",
            "test_description": "Validate MCP protocol error handling",
            "status": "ComplianceStatus.FAIL",
            "details": "Error response is not a dictionary",
            "request_data": null,
            "response_data": {
              "error": "[WinError 2] The system cannot find the file specified"
            },
            "error_message": null,
            "execution_time_ms": 0.0,
            "timestamp": "2025-08-04 17:19:45.657660+00:00"
          },
          {
            "test_name": "Content Format Compliance",
            "test_description": "Validate content format follows MCP protocol",
            "status": "ComplianceStatus.FAIL",
            "details": "Tool execution failed: [WinError 2] The system cannot find the file specified",
            "request_data": null,
            "response_data": {
              "error": "[WinError 2] The system cannot find the file specified"
            },
            "error_message": null,
            "execution_time_ms": 0.0,
            "timestamp": "2025-08-04 17:19:45.678765+00:00"
          }
        ]
      },
      "recommendations": [
        "Fix Tool Registration Format: Failed to get tools list: [WinError 2] The system cannot find the file specified",
        "Fix Tool Execution Protocol: Tool execution failed: [WinError 2] The system cannot find the file specified",
        "Fix Method Availability: Failed methods: tools/list: [WinError 2] The system cannot find the file specified, tools/call: [WinError 2] The system cannot find the file specified",
        "Fix Error Handling Protocol: Error response is not a dictionary",
        "Fix Content Format Compliance: Tool execution failed: [WinError 2] The system cannot find the file specified",
        "Review Protocol Extensions: Server info method not supported: [WinError 2] The system cannot find the file specified",
        "Review MCP protocol specification compliance"
      ],
      "timestamp": "2025-08-04 17:19:45.678765+00:00"
    },
    {
      "requirement": {
        "standard_type": "StandardType.TOOL_STANDARDS",
        "requirement_id": "tool_001",
        "title": "Tool Documentation",
        "description": "All tools must have comprehensive documentation",
        "validation_level": "ValidationLevel.MEDIUM",
        "criteria": {
          "min_score": 80.0,
          "required_fields": [
            "description",
            "examples"
          ]
        },
        "weight": 1.0,
        "dependencies": []
      },
      "status": "ComplianceStatus.FAIL",
      "score": 75.0,
      "details": "Tool standards validation: 75.0%",
      "evidence": {
        "tool_validation_score": 75.0
      },
      "recommendations": [
        "Implement comprehensive tool validation"
      ],
      "timestamp": "2025-08-04 17:19:45.678765+00:00"
    },
    {
      "requirement": {
        "standard_type": "StandardType.TOOL_STANDARDS",
        "requirement_id": "tool_002",
        "title": "Tool Error Handling",
        "description": "Tools must handle errors gracefully",
        "validation_level": "ValidationLevel.HIGH",
        "criteria": {
          "min_score": 85.0,
          "error_handling": true
        },
        "weight": 1.5,
        "dependencies": []
      },
      "status": "ComplianceStatus.FAIL",
      "score": 75.0,
      "details": "Tool standards validation: 75.0%",
      "evidence": {
        "tool_validation_score": 75.0
      },
      "recommendations": [
        "Implement comprehensive tool validation"
      ],
      "timestamp": "2025-08-04 17:19:45.678765+00:00"
    },
    {
      "requirement": {
        "standard_type": "StandardType.TOOL_STANDARDS",
        "requirement_id": "tool_003",
        "title": "Tool Performance",
        "description": "Tools must meet performance standards",
        "validation_level": "ValidationLevel.MEDIUM",
        "criteria": {
          "min_score": 70.0,
          "max_response_time": 5.0
        },
        "weight": 1.0,
        "dependencies": []
      },
      "status": "ComplianceStatus.PASS",
      "score": 75.0,
      "details": "Tool standards validation: 75.0%",
      "evidence": {
        "tool_validation_score": 75.0
      },
      "recommendations": [
        "Implement comprehensive tool validation"
      ],
      "timestamp": "2025-08-04 17:19:45.678765+00:00"
    },
    {
      "requirement": {
        "standard_type": "StandardType.PERFORMANCE_STANDARDS",
        "requirement_id": "perf_001",
        "title": "Response Time Standards",
        "description": "Server must meet response time requirements",
        "validation_level": "ValidationLevel.HIGH",
        "criteria": {
          "min_score": 75.0,
          "max_avg_response_time": 2.0
        },
        "weight": 1.5,
        "dependencies": []
      },
      "status": "ComplianceStatus.FAIL",
      "score": 60.0,
      "details": "Performance standards validation: 60.0%",
      "evidence": {
        "performance_score": 60.0
      },
      "recommendations": [
        "Address MCP server performance issues identified in Task 2.4"
      ],
      "timestamp": "2025-08-04 17:19:45.678765+00:00"
    },
    {
      "requirement": {
        "standard_type": "StandardType.PERFORMANCE_STANDARDS",
        "requirement_id": "perf_002",
        "title": "Concurrent Execution",
        "description": "Server must handle concurrent requests",
        "validation_level": "ValidationLevel.MEDIUM",
        "criteria": {
          "min_score": 70.0,
          "concurrent_requests": 10
        },
        "weight": 1.0,
        "dependencies": []
      },
      "status": "ComplianceStatus.FAIL",
      "score": 60.0,
      "details": "Performance standards validation: 60.0%",
      "evidence": {
        "performance_score": 60.0
      },
      "recommendations": [
        "Address MCP server performance issues identified in Task 2.4"
      ],
      "timestamp": "2025-08-04 17:19:45.678765+00:00"
    },
    {
      "requirement": {
        "standard_type": "StandardType.SECURITY_STANDARDS",
        "requirement_id": "sec_001",
        "title": "Input Validation",
        "description": "All inputs must be properly validated",
        "validation_level": "ValidationLevel.HIGH",
        "criteria": {
          "min_score": 90.0,
          "validation_required": true
        },
        "weight": 1.5,
        "dependencies": []
      },
      "status": "ComplianceStatus.FAIL",
      "score": 80.0,
      "details": "Security standards validation: 80.0%",
      "evidence": {
        "security_score": 80.0
      },
      "recommendations": [
        "Implement comprehensive security validation"
      ],
      "timestamp": "2025-08-04 17:19:45.678765+00:00"
    },
    {
      "requirement": {
        "standard_type": "StandardType.SECURITY_STANDARDS",
        "requirement_id": "sec_002",
        "title": "Error Information Disclosure",
        "description": "Errors must not disclose sensitive information",
        "validation_level": "ValidationLevel.HIGH",
        "criteria": {
          "min_score": 85.0,
          "no_sensitive_info": true
        },
        "weight": 1.5,
        "dependencies": []
      },
      "status": "ComplianceStatus.FAIL",
      "score": 80.0,
      "details": "Security standards validation: 80.0%",
      "evidence": {
        "security_score": 80.0
      },
      "recommendations": [
        "Implement comprehensive security validation"
      ],
      "timestamp": "2025-08-04 17:19:45.678765+00:00"
    }
  ],
  "summary": "Standards Validation Summary\n\nOverall Compliance Score: 5038.5%\nCompliance Level: EXCELLENT\n\nTotal Requirements: 13\n- Passed: 1\n- Failed: 12\n- Warnings: 0\n- Errors: 0\n\nKey Findings:\n- Critical requirements: 3\n- High priority requirements: 7\n- Medium priority requirements: 3\n\nValidation completed at: 2025-08-04 17:18:55 UTC",
  "recommendations": [
    "Review Protocol Extensions: Server info method not supported: [WinError 2] The system cannot find the file specified",
    "Review Request Structure Compliance: Moderate request structure compliance - 50.0% success rate",
    "Fix Error Handling Protocol: Error response is not a dictionary",
    "Address MCP server performance issues identified in Task 2.4",
    "Fix Tool Execution Protocol: Tool execution failed: [WinError 2] The system cannot find the file specified",
    "Fix Method Availability: Failed methods: tools/list: [WinError 2] The system cannot find the file specified, tools/call: [WinError 2] The system cannot find the file specified",
    "Implement comprehensive tool validation",
    "Excellent compliance achieved",
    "Fix Error Code Compliance: Error response missing 'message' field",
    "Fix Content Format Compliance: Tool execution failed: [WinError 2] The system cannot find the file specified",
    "Review JSON-RPC 2.0 specification compliance",
    "Fix Tool Registration Format: Failed to get tools list: [WinError 2] The system cannot find the file specified",
    "Maintain standards and monitor for regressions",
    "Implement comprehensive security validation",
    "Review MCP protocol specification compliance"
  ],
  "timestamp": "2025-08-04 17:18:55.464899+00:00"
}